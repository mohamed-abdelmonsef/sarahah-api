swagger: '2.0'
info:
  title: crud apis for saraha-app
  version: 1.0.0
  description: crud apis for sarahah app made using node.js ,express and mongoDB 
  contact:
    email: 'm6abdelmonsef@gmail.com'
    website: 'https://github.com/mohamed-abdelmonsef'
  servers:
    -url: 'http://localhost:3000/'
    description: this is my local server
    -url: 'https://api-for-note-app.herokuapp.com/'
    description: this is my heroku server
schemes: [https ,http]   
produces:
  - application/json
consumes:
  - application/json

securityDefinitions:
  Bearer:
    type: apiKey
    name: x-access-token
    in: header
##############################################

tags:
  - name: Auth
  - name: Profile 
  - name: Home 
  - name: Send Message 


############################################################################################
paths:

### registeration endpoint
  /register:
    put:
      summary: api for adding new user
      tags:
        - Auth
      parameters:
        - in: body
          name: user
          required: true
          description: user inputs
          schema:
            $ref: '#/components/schemas/userRegister'
      responses:
        201:
          description: the user registered successfully
          content:
            application/json:
              $ref: '#/components/schemas/userRegister'
        422:
          description: invalid data  
          content:
            application/json:
              $ref: '#/components/schemas/userRegister'
        500:
          description: db or server error (unexpected error)         

######### login api
  /login:
    post:
      summary: api for logging in
      tags:
        - Auth    
      parameters:
        - in: body
          name: user
          required: true
          description: user inputs
          schema:
            $ref: '#/components/schemas/userLogin'
      responses:
        200:
          description: the user logged in successfully
          content:
            application/json:
              $ref: '#/components/schemas/userLogin'
        401:
          description: invalid password
          content:      
            application/json:
              $ref: '#/components/schemas/userLogin'                
        404:
          description: user not found
          content:      
            application/json:
              $ref: '#/components/schemas/userLogin'
        422:
          description: invalid data  
          content:
            application/json:
              $ref: '#/components/schemas/userLogin'              
        500:
          description: db or server error (unexpected error)

#### retrive all messages of logged in user
  /home:
    get:
      security:
        - Bearer: []
      summary: get all messages of my following list
      tags:
        - Home
      responses:
        200:
          description: messages retrived successfully
          content:
            application/json:
              $ref: '#/components/schemas/message'
        500:
          description: db or server error (unexpected error) 
        401:
          description: Unauthorized user    
        403:
          description: No token provided!

##############################  profile endpoints ################################# 


########## endpoint that retrieve the messages sent to user .
  /profile/privateQuestions:
    get:
      security:
        - Bearer: []
      summary: get all messages of logged in user that have no answers
      tags:
        - Profile
      responses:
        200:
          description: messages that have no answers yet, retrived successfully
          content:
            application/json:
              $ref: '#/components/schemas/message'
        500:
          description: db or server error (unexpected error) 
        401:
          description: Unauthorized user    
        403:
          description: No token provided!


############ endpoint for replying ##############
  /profile/privateQuestions/{messageId}:
    post:
      security:
        - Bearer: []
      summary: api for reply to message
      tags:
        - Profile
      parameters:
        - in: path
          name: messageId
          required: true
          description: id of message ,you want reply to it
          schema:
            type: string
        - in: body
          name: reply
          description: reply to message
          schema:
            $ref: '#/components/schemas/reply'
      responses:
        200:
          description: reply sent successfully
          content:
            application/json:
              $ref: '#/components/schemas/reply'
        404:
          description: message not found or not exist anymore
        500:
          description: db or server error (unexpected error) 


########## endpoint that get profile of user
  /profile/{userName}:
    get:
      security:
        - Bearer: []
      summary: get all messages of this profile
      tags:
        - Profile
      parameters:
        - in: path
          name: userName
          required: true
          description: userName of profile ,you want show it
          schema:
            type: string  
      responses:
        200:
          description: messages that have answers of this user, retrived successfully
          content:
            application/json:
              $ref: '#/components/schemas/message'
        500:
          description: db or server error (unexpected error) 
        401:
          description: Unauthorized user    
        403:
          description: No token provided!

########## endpoint that retrived message with its replies
  /replies/{messageId}:
    get:
      security:
        - Bearer: []
      summary: get message and its replies
      tags:
        - Profile
      parameters:
        - in: path
          name: messageId
          required: true
          description: messageId of message ,that i want see its replies
          schema:
            type: string  
      responses:
        200:
          description: the message and its replies
          content:
            application/json:
              $ref: '#/components/schemas/message'
              $ref: '#/components/schemas/reply'
        500:
          description: db or server error (unexpected error) 
        401:
          description: Unauthorized user    
        403:
          description: No token provided!

########## endpoint to follow user
  /follow/{userName}:
    get:
      security:
        - Bearer: []
      summary: follow user
      tags:
        - Profile
      parameters:
        - in: path
          name: userName
          required: true
          description: userName of profile ,you want to follow
          schema:
            type: string  
      responses:
        200:
          description: you followed this user successfully
        500:
          description: db or server error (unexpected error) 
        401:
          description: Unauthorized user    
        403:
          description: No token provided!


########## endpoint to unfollow user
  /unfollow/{userName}:
    get:
      security:
        - Bearer: []
      summary: unfollow user
      tags:
        - Profile
      parameters:
        - in: path
          name: userName
          required: true
          description: userName of profile ,you want to unfollow
          schema:
            type: string  
      responses:
        200:
          description: you unfollowed this user successfully
        500:
          description: db or server error (unexpected error) 
        401:
          description: Unauthorized user    
        403:
          description: No token provided!


#### share link to people to send you messages
  /shareLink/{userName}:
    get:
      security:
        - Bearer: []
      summary: share link to people to send you messages
      tags:
        - Profile
      parameters:
        - in: path
          name: userName
          required: true
          description: userName of user ,to share link with people to send messages
          schema:
            type: string  
      responses:
        200:
          description: get link to share
      
###############################################################################################

#### send message endpoint
  /sendMessage/{userName}:
    post:
      summary: api for add new message
      tags:
        - Send Message
      parameters:
        - in: path
          name: userName
          required: true
          description: userName of user ,you want send message to
          schema:
            type: string
        - in: body
          name: message
          description: message to user
          schema:
            $ref: '#/components/schemas/message'
      responses:
        200:
          description: message sent successfully
          content:
            application/json:
              $ref: '#/components/schemas/message'
        404:
          description: user not found or not exist anymore
        500:
          description: db or server error (unexpected error) 

############################################################################################
components:
  schemas:
### user registeration schema 
    userRegister:
      type: object
      required:
        - name
        - userName
        - email
        - password
        - confirmPass
      properties:
        name:
          type: string
          description: name
        userName:
          type: string
          description: user name  
        email:
          type: string
          description: user email
        password:
          type: string
          description: password must contain numbers
        confirmPass:
          type: string
          description: confirmation password
      example:
        name: zain
        userName: momo
        email: mo@gmail.com
        password: aa1
        confirmPass: aa1        

#### user login schema
    userLogin:
      type: object
      required:
        - email
        - password
      properties: 
        email:
          type: string
          description: user email
        password:
          type: string
          description: password must contain numbers
      example:
        email: mo@gmail.com
        password: aa1

## message schema
    message:
      type: object
      required:
        - message
      properties: 
        message:
          type: string
          description: content or message sending from anonymous 
      example:
        message: hello, you are great person


## reply schema
    reply:
      type: object
      required:
        - reply
      properties: 
        reply:
          type: string
          description: content or message sending from anonymous 
      example:
        reply: hello, you are great person






